name: CI

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: lint-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            lint-${{ runner.os }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Ensure pinned toolchain components
        run: |
          TOOLCHAIN=$(rustup show active-toolchain | cut -d' ' -f1)
          rustup component add --toolchain "$TOOLCHAIN" rustfmt clippy
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  tests:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Restore workspace caches
        uses: actions/cache@v4
        with:
          path: |
            .cache/cargo
            .cache/rustup
            .cache/pip
            .cache/npm
            .cache/maven
            .cache/dotnet
            .cache/bun
          key: tests-${{ runner.os }}-amd64-${{ hashFiles('**/Cargo.lock', 'asherah-node/package-lock.json', 'asherah-py/Cargo.toml', 'asherah-py/pyproject.toml', 'asherah-java/java/pom.xml', 'asherah-dotnet/**/*.csproj') }}
          restore-keys: |
            tests-${{ runner.os }}-amd64-
      - name: Verify Docker availability
        run: docker version
      - name: Run full language test matrix
        run: ./scripts/test-in-docker.sh

  core-x86_64:
    runs-on: ubuntu-latest
    needs: lint
    env:
      CARGO_HOME: ${{ github.workspace }}/.cache/cargo
      RUSTUP_HOME: ${{ github.workspace }}/.cache/rustup
      NPM_CONFIG_CACHE: ${{ github.workspace }}/.cache/npm
      BUN_INSTALL: ${{ github.workspace }}/.cache/bun
      PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
    steps:
      - uses: actions/checkout@v4
      - name: Restore workspace caches
        uses: actions/cache@v4
        with:
          path: |
            .cache/cargo
            .cache/rustup
            .cache/pip
            .cache/npm
            .cache/maven
            .cache/dotnet
            .cache/bun
          key: build-${{ runner.os }}-x86_64-core-${{ hashFiles('**/Cargo.lock', 'asherah-node/package-lock.json', 'asherah-py/Cargo.toml', 'asherah-py/pyproject.toml', 'asherah-java/java/pom.xml', 'asherah-dotnet/**/*.csproj') }}
          restore-keys: |
            build-${{ runner.os }}-x86_64-core-
      - name: Build FFI core (x86_64)
        env:
          TARGET_ARCH: x86_64
          BINDING_COMPONENTS: ffi
        run: ./scripts/build-bindings.sh
      - name: Cache x86_64 core artifacts
        uses: actions/cache/save@v4
        with:
          path: |
            target/x86_64-unknown-linux-gnu
            target/release
          key: core-target-${{ runner.os }}-x86_64-${{ github.run_id }}

  package-x86_64:
    runs-on: ubuntu-latest
    needs: core-x86_64
    strategy:
      fail-fast: false
      matrix:
        component: [ffi, node, python, dotnet, java]
    env:
      CARGO_HOME: ${{ github.workspace }}/.cache/cargo
      RUSTUP_HOME: ${{ github.workspace }}/.cache/rustup
      NPM_CONFIG_CACHE: ${{ github.workspace }}/.cache/npm
      BUN_INSTALL: ${{ github.workspace }}/.cache/bun
      PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
    steps:
      - uses: actions/checkout@v4
      - name: Restore workspace caches
        if: matrix.component != 'python'
        uses: actions/cache@v4
        with:
          path: |
            .cache/cargo
            .cache/rustup
            .cache/pip
            .cache/npm
            .cache/maven
            .cache/dotnet
            .cache/bun
          key: build-${{ runner.os }}-x86_64-${{ matrix.component }}-${{ hashFiles('**/Cargo.lock', 'asherah-node/package-lock.json', 'asherah-py/Cargo.toml', 'asherah-py/pyproject.toml', 'asherah-java/java/pom.xml', 'asherah-dotnet/**/*.csproj') }}
          restore-keys: |
            build-${{ runner.os }}-x86_64-${{ matrix.component }}-
            build-${{ runner.os }}-x86_64-
      - name: Restore x86_64 core artifacts
        if: matrix.component != 'python'
        uses: actions/cache/restore@v4
        with:
          path: |
            target/x86_64-unknown-linux-gnu
            target/release
          key: core-target-${{ runner.os }}-x86_64-${{ github.run_id }}
          fail-on-cache-miss: true
      - uses: actions/setup-node@v4
        if: matrix.component == 'node'
        with:
          node-version: 20
      - uses: actions/setup-dotnet@v4
        if: matrix.component == 'dotnet'
        with:
          dotnet-version: '8.0.x'
      - name: Restore x86_64 core artifacts for Python
        if: matrix.component == 'python'
        uses: actions/cache/restore@v4
        with:
          path: |
            target/x86_64-unknown-linux-gnu
            target/release
          key: core-target-${{ runner.os }}-x86_64-${{ github.run_id }}
          fail-on-cache-miss: true
      - name: Prepare Python build directory
        if: matrix.component == 'python'
        run: |
          rm -rf artifacts/x86_64/python || true
          mkdir -p artifacts/x86_64/python
      - name: Package ${{ matrix.component }} (x86_64) - manylinux
        if: matrix.component == 'python'
        run: |
          docker run --rm \
            -v "$PWD":/io \
            -w /io \
            quay.io/pypa/manylinux_2_28_x86_64:latest \
            bash -c "
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal
              source \$HOME/.cargo/env
              /opt/python/cp38-cp38/bin/pip install maturin
              /opt/python/cp38-cp38/bin/maturin build --release --manifest-path asherah-py/Cargo.toml --compatibility manylinux_2_28 --out artifacts/x86_64/python
            "

      - name: Package ${{ matrix.component }} (x86_64)
        if: matrix.component != 'python'
        env:
          TARGET_ARCH: x86_64
          BINDING_COMPONENTS: ${{ matrix.component }}
          SKIP_CORE_BUILD: "1"
        run: ./scripts/build-bindings.sh
      - name: Upload partial artifact (${{ matrix.component }})
        uses: actions/upload-artifact@v4
        with:
          name: bindings-linux-x86_64-part-${{ matrix.component }}
          path: artifacts/x86_64

  arm64-test-image:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build arm64 test image
        run: |
          docker buildx build \
            --file docker/tests.Dockerfile \
            --platform linux/arm64 \
            --tag asherah-tests:arm64 \
            --cache-from type=gha,scope=tests-arm64-image \
            --cache-to type=gha,mode=max,scope=tests-arm64-image \
            --output type=docker,dest=/tmp/asherah-tests-arm64.tar \
            .
      - name: Upload arm64 test image
        uses: actions/upload-artifact@v4
        with:
          name: arm64-tests-image
          path: /tmp/asherah-tests-arm64.tar

  tests-arm64:
    runs-on: ubuntu-latest
    needs:
      - package-arm64
      - arm64-test-image
    strategy:
      fail-fast: true
      matrix:
        binding: [ffi, python, node, dotnet, java]
    steps:
      - uses: actions/checkout@v4
      - name: Restore workspace caches
        uses: actions/cache@v4
        with:
          path: |
            .cache/cargo
            .cache/rustup
            .cache/pip
            .cache/npm
            .cache/maven
            .cache/dotnet
          key: tests-${{ runner.os }}-arm64-${{ matrix.binding }}-${{ hashFiles('**/Cargo.lock', 'asherah-node/package-lock.json', 'asherah-py/Cargo.toml', 'asherah-py/pyproject.toml', 'asherah-java/java/pom.xml', 'asherah-dotnet/**/*.csproj') }}
          restore-keys: |
            tests-${{ runner.os }}-arm64-${{ matrix.binding }}-
            tests-${{ runner.os }}-arm64-
      - name: Download arm64 binding artifact
        if: matrix.binding != 'python'
        uses: actions/download-artifact@v4
        with:
          name: bindings-linux-aarch64-part-${{ matrix.binding }}
          path: artifacts/aarch64
      - name: Download arm64 core FFI artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-linux-aarch64-part-ffi
          path: artifacts/aarch64
      - name: Download arm64 test image
        uses: actions/download-artifact@v4
        with:
          name: arm64-tests-image
          path: artifacts
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64
      - name: Verify Docker availability
        run: docker version
      - name: Load arm64 test image
        run: docker load --input artifacts/asherah-tests-arm64.tar
      - name: Run ${{ matrix.binding }} binding tests (Arm64)
        env:
          DOCKER_PLATFORM: linux/arm64
          BINDING_TESTS_ONLY: "1"
          BINDING_ARTIFACTS_DIR: ${{ github.workspace }}/artifacts/aarch64
          BINDING_TESTS_FAST_ONLY: "1"
          BINDING_TESTS_BINDING: ${{ matrix.binding }}
          USE_PREBUILT_TEST_IMAGE: "1"
          TESTS_IMAGE_TAG: asherah-tests:arm64
        run: ./scripts/test-in-docker.sh

  sanitizers:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: sanitizers-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sanitizers-${{ runner.os }}-
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm valgrind
      - name: Install nightly with miri
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri
      - name: Run miri on FFI crate
        run: |
          cargo +nightly miri setup
          cargo +nightly miri test -p asherah-ffi
      - name: Prepare nightly toolchain target
        run: rustup +nightly target add x86_64-unknown-linux-gnu
      - name: Run address sanitizer on FFI crate
        env:
          RUSTFLAGS: -Zsanitizer=address
          RUSTDOCFLAGS: -Zsanitizer=address
          ASAN_OPTIONS: detect_leaks=1
        run: cargo +nightly -Zbuild-std test -p asherah-ffi --target x86_64-unknown-linux-gnu -- --test-threads=1
      - name: Run valgrind on FFI tests
        run: |
          valgrind --error-exitcode=1 cargo test -p asherah-ffi --lib

  assemble-x86_64:
    runs-on: ubuntu-latest
    needs: package-x86_64
    steps:
      - name: Prepare artifact staging
        run: |
          rm -rf partial/x86_64 artifacts/x86_64
          mkdir -p partial/x86_64 artifacts/x86_64
      - uses: actions/download-artifact@v4
        with:
          name: bindings-linux-x86_64-part-ffi
          path: partial/x86_64/ffi
      - uses: actions/download-artifact@v4
        with:
          name: bindings-linux-x86_64-part-node
          path: partial/x86_64/node
      - uses: actions/download-artifact@v4
        with:
          name: bindings-linux-x86_64-part-python
          path: partial/x86_64/python
      - uses: actions/download-artifact@v4
        with:
          name: bindings-linux-x86_64-part-dotnet
          path: partial/x86_64/dotnet
      - uses: actions/download-artifact@v4
        with:
          name: bindings-linux-x86_64-part-java
          path: partial/x86_64/java
      - name: Merge partial artifacts
        run: |
          shopt -s dotglob nullglob
          for part_root in partial/x86_64/*; do
            [ -d "$part_root" ] || continue
            if compgen -G "$part_root/artifacts/x86_64/*" > /dev/null; then
              for entry in "$part_root"/artifacts/x86_64/*; do
                echo "Copying ${entry}"
                cp -R "$entry" artifacts/x86_64/
              done
            fi
            if compgen -G "$part_root"/* > /dev/null; then
              for entry in "$part_root"/*; do
                base="$(basename "$entry")"
                if [ "$base" = "artifacts" ]; then
                  continue
                fi
                echo "Copying ${entry}"
                cp -R "$entry" artifacts/x86_64/
              done
            fi
          done
          shopt -u dotglob nullglob
          echo "Assembled x86_64 contents:"
          find artifacts/x86_64 -maxdepth 3 -mindepth 1 -print || true
      - name: Upload consolidated x86_64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-linux-x86_64
          path: artifacts/x86_64/**

  assemble-arm64:
    runs-on: ubuntu-latest
    needs: package-arm64
    steps:
      - name: Prepare artifact staging
        run: |
          rm -rf partial/aarch64 artifacts/aarch64
          mkdir -p partial/aarch64 artifacts/aarch64
      - uses: actions/download-artifact@v4
        with:
          name: bindings-linux-aarch64-part-ffi
          path: partial/aarch64/ffi
      - uses: actions/download-artifact@v4
        with:
          name: bindings-linux-aarch64-part-node
          path: partial/aarch64/node
      - uses: actions/download-artifact@v4
        with:
          name: bindings-linux-aarch64-part-python
          path: partial/aarch64/python
      - uses: actions/download-artifact@v4
        with:
          name: bindings-linux-aarch64-part-dotnet
          path: partial/aarch64/dotnet
      - uses: actions/download-artifact@v4
        with:
          name: bindings-linux-aarch64-part-java
          path: partial/aarch64/java
      - name: Merge partial artifacts
        run: |
          shopt -s dotglob nullglob
          for part_root in partial/aarch64/*; do
            [ -d "$part_root" ] || continue
            if compgen -G "$part_root/artifacts/aarch64/*" > /dev/null; then
              for entry in "$part_root"/artifacts/aarch64/*; do
                echo "Copying ${entry}"
                cp -R "$entry" artifacts/aarch64/
              done
            fi
            if compgen -G "$part_root"/* > /dev/null; then
              for entry in "$part_root"/*; do
                base="$(basename "$entry")"
                if [ "$base" = "artifacts" ]; then
                  continue
                fi
                echo "Copying ${entry}"
                cp -R "$entry" artifacts/aarch64/
              done
            fi
          done
          shopt -u dotglob nullglob
          echo "Assembled arm64 contents:"
          find artifacts/aarch64 -maxdepth 3 -mindepth 1 -print || true
      - name: Upload consolidated arm64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-linux-aarch64
          path: artifacts/aarch64/**

  core-arm64:
    runs-on: ubuntu-latest
    needs: lint
    env:
      CARGO_HOME: ${{ github.workspace }}/.cache/cargo
      RUSTUP_HOME: ${{ github.workspace }}/.cache/rustup
      NPM_CONFIG_CACHE: ${{ github.workspace }}/.cache/npm
      BUN_INSTALL: ${{ github.workspace }}/.cache/bun
      PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
    steps:
      - uses: actions/checkout@v4
      - name: Restore workspace caches
        uses: actions/cache@v4
        with:
          path: |
            .cache/cargo
            .cache/rustup
            .cache/pip
            .cache/npm
            .cache/maven
            .cache/dotnet
            .cache/bun
          key: build-${{ runner.os }}-arm64-core-${{ hashFiles('**/Cargo.lock', 'asherah-node/package-lock.json', 'asherah-py/Cargo.toml', 'asherah-py/pyproject.toml', 'asherah-java/java/pom.xml', 'asherah-dotnet/**/*.csproj') }}
          restore-keys: |
            build-${{ runner.os }}-arm64-core-
      - name: Install cross toolchains
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross pkg-config
      - name: Prepare Rust target
        run: rustup target add aarch64-unknown-linux-gnu
      - name: Build FFI core (arm64)
        env:
          TARGET_ARCH: aarch64
          BINDING_COMPONENTS: ffi
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_AR: aarch64-linux-gnu-ar
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
          AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
          PKG_CONFIG_ALLOW_CROSS: 1
        run: ./scripts/build-bindings.sh
      - name: Cache arm64 core artifacts
        uses: actions/cache/save@v4
        with:
          path: |
            target/aarch64-unknown-linux-gnu
            target/release
          key: core-target-${{ runner.os }}-arm64-${{ github.run_id }}

  package-arm64:
    runs-on: ubuntu-latest
    needs: core-arm64
    strategy:
      fail-fast: false
      matrix:
        component: [ffi, node, python, dotnet, java]
    env:
      CARGO_HOME: ${{ github.workspace }}/.cache/cargo
      RUSTUP_HOME: ${{ github.workspace }}/.cache/rustup
      NPM_CONFIG_CACHE: ${{ github.workspace }}/.cache/npm
      BUN_INSTALL: ${{ github.workspace }}/.cache/bun
      PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
    steps:
      - uses: actions/checkout@v4
      - name: Restore workspace caches
        if: matrix.component != 'python'
        uses: actions/cache@v4
        with:
          path: |
            .cache/cargo
            .cache/rustup
            .cache/pip
            .cache/npm
            .cache/maven
            .cache/dotnet
            .cache/bun
          key: build-${{ runner.os }}-arm64-${{ matrix.component }}-${{ hashFiles('**/Cargo.lock', 'asherah-node/package-lock.json', 'asherah-py/Cargo.toml', 'asherah-py/pyproject.toml', 'asherah-java/java/pom.xml', 'asherah-dotnet/**/*.csproj') }}
          restore-keys: |
            build-${{ runner.os }}-arm64-${{ matrix.component }}-
            build-${{ runner.os }}-arm64-
      - name: Restore arm64 core artifacts
        if: matrix.component != 'python'
        uses: actions/cache/restore@v4
        with:
          path: |
            target/aarch64-unknown-linux-gnu
            target/release
          key: core-target-${{ runner.os }}-arm64-${{ github.run_id }}
          fail-on-cache-miss: true
      - name: Install cross toolchains
        if: matrix.component != 'python'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross pkg-config
      - name: Prepare Rust target
        if: matrix.component != 'python'
        run: rustup target add aarch64-unknown-linux-gnu
      - uses: actions/setup-node@v4
        if: matrix.component == 'node'
        with:
          node-version: 20
      - uses: actions/setup-dotnet@v4
        if: matrix.component == 'dotnet'
        with:
          dotnet-version: '8.0.x'
      - name: Restore arm64 core artifacts for Python
        if: matrix.component == 'python'
        uses: actions/cache/restore@v4
        with:
          path: |
            target/aarch64-unknown-linux-gnu
            target/release
          key: core-target-${{ runner.os }}-arm64-${{ github.run_id }}
          fail-on-cache-miss: true
      - name: Prepare Python build directory
        if: matrix.component == 'python'
        run: |
          rm -rf artifacts/aarch64/python || true
          mkdir -p artifacts/aarch64/python
      - name: Package ${{ matrix.component }} (arm64) - manylinux
        if: matrix.component == 'python'
        run: |
          docker run --rm \
            -v "$PWD":/io \
            -w /io \
            messense/manylinux_2_28-cross:x86_64 \
            bash -c "
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal
              source \$HOME/.cargo/env
              rustup target add aarch64-unknown-linux-gnu
              pip3.11 install maturin
              export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
              export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
              export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
              maturin build --release --target aarch64-unknown-linux-gnu --manifest-path asherah-py/Cargo.toml --compatibility manylinux_2_28 --out artifacts/aarch64/python
            "

      - name: Package ${{ matrix.component }} (arm64)
        if: matrix.component != 'python'
        env:
          TARGET_ARCH: aarch64
          BINDING_COMPONENTS: ${{ matrix.component }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_AR: aarch64-linux-gnu-ar
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
          AR_aarch64_unknown_linux_gnu: aarch64-linux-gnu-ar
          PKG_CONFIG_ALLOW_CROSS: 1
          SKIP_CORE_BUILD: "1"
        run: ./scripts/build-bindings.sh
      - name: Upload partial artifact (${{ matrix.component }} arm64)
        uses: actions/upload-artifact@v4
        with:
          name: bindings-linux-aarch64-part-${{ matrix.component }}
          path: artifacts/aarch64
