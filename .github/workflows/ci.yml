name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Ensure pinned toolchain components
        run: |
          TOOLCHAIN=$(rustup show active-toolchain | cut -d' ' -f1)
          rustup component add --toolchain "$TOOLCHAIN" rustfmt clippy
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  tests:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Verify Docker availability
        run: docker version
      - name: Run full language test matrix
        run: ./scripts/test-in-docker.sh

  tests-arm64:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Verify Docker availability
        run: docker version
      - name: Run full language test matrix (Arm64)
        env:
          DOCKER_PLATFORM: linux/arm64
        run: ./scripts/test-in-docker.sh

  sanitizers:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm valgrind
      - name: Install nightly with miri
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri
      - name: Run miri on FFI crate
        run: |
          cargo +nightly miri setup
          cargo +nightly miri test -p asherah-ffi
      - name: Prepare nightly toolchain target
        run: rustup +nightly target add x86_64-unknown-linux-gnu
      - name: Run address sanitizer on FFI crate
        env:
          RUSTFLAGS: -Zsanitizer=address
          RUSTDOCFLAGS: -Zsanitizer=address
          ASAN_OPTIONS: detect_leaks=1
        run: cargo +nightly -Zbuild-std test -p asherah-ffi --target x86_64-unknown-linux-gnu -- --test-threads=1
      - name: Run valgrind on FFI tests
        run: |
          valgrind --error-exitcode=1 cargo test -p asherah-ffi --lib

  build-cross:
    runs-on: ubuntu-latest
    needs:
      - tests
      - tests-arm64
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU for cross architectures
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build bindings (amd64)
        env:
          DOCKER_PLATFORM: linux/amd64
        run: ./scripts/build-bindings-docker.sh
      - name: Build bindings (arm64)
        env:
          DOCKER_PLATFORM: linux/arm64
        run: ./scripts/build-bindings-docker.sh
      - name: Upload amd64 binding artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-linux-x86_64
          path: artifacts/x86_64/**
      - name: Upload arm64 binding artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-linux-aarch64
          path: artifacts/aarch64/**
